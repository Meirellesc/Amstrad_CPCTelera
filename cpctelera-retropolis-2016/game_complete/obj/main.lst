                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.5 #9498 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _inicializar
                             13 	.globl _ejecutarEstado
                             14 	.globl _andando
                             15 	.globl _andando_animar
                             16 	.globl _prepSalto
                             17 	.globl _prepSalto_animar
                             18 	.globl _saltando
                             19 	.globl _saltando_entrar
                             20 	.globl _ascender
                             21 	.globl _quieto
                             22 	.globl _cayendo
                             23 	.globl _descender
                             24 	.globl _cayendo_entrar
                             25 	.globl _aterrizando
                             26 	.globl _aterrizando_entrar
                             27 	.globl _compruebaTeclas
                             28 	.globl _redibujarProta
                             29 	.globl _moverIzquierda
                             30 	.globl _moverDerecha
                             31 	.globl _retrocederMapa
                             32 	.globl _avanzarMapa
                             33 	.globl _sobreSuelo
                             34 	.globl _ajustarAlSuelo
                             35 	.globl _obtenerTilePtr
                             36 	.globl _borrarProta
                             37 	.globl _dibujarProta
                             38 	.globl _seleccionarSpriteProta
                             39 	.globl _girarFrame
                             40 	.globl _asignarFrame
                             41 	.globl _dibujarMapa
                             42 	.globl _interrupcion
                             43 	.globl _playmusic
                             44 	.globl _cpct_etm_setTileset2x4
                             45 	.globl _cpct_etm_drawTileBox2x4
                             46 	.globl _cpct_akp_musicInit
                             47 	.globl _cpct_getScreenPtr
                             48 	.globl _cpct_setPALColour
                             49 	.globl _cpct_setPalette
                             50 	.globl _cpct_waitVSYNC
                             51 	.globl _cpct_setVideoMode
                             52 	.globl _cpct_hflipSpriteM0
                             53 	.globl _cpct_drawSpriteMaskedAlignedTable
                             54 	.globl _cpct_drawSprite
                             55 	.globl _cpct_get2Bits
                             56 	.globl _cpct_isAnyKeyPressed
                             57 	.globl _cpct_isKeyPressed
                             58 	.globl _cpct_scanKeyboard_if
                             59 	.globl _cpct_setInterruptHandler
                             60 	.globl _cpct_disableFirmware
                             61 	.globl _prota
                             62 	.globl _num_mapa
                             63 	.globl _mapa
                             64 	.globl _EEstados
                             65 	.globl _EEventos
                             66 	.globl _EMirar
                             67 	.globl _g_tablaSalto
                             68 	.globl _anim_caer
                             69 	.globl _anim_saltar
                             70 	.globl _anim_andar
                             71 	.globl _g_frames
                             72 	.globl _mapas
                             73 	.globl _G_song
                             74 	.globl _quieto_entrar
                             75 	.globl _prepSalto_entrar
                             76 	.globl _andando_entrar
                             77 ;--------------------------------------------------------
                             78 ; special function registers
                             79 ;--------------------------------------------------------
                             80 ;--------------------------------------------------------
                             81 ; ram data
                             82 ;--------------------------------------------------------
                             83 	.area _DATA
   0000                      84 _EMirar::
   0000                      85 	.ds 1
   0001                      86 _EEventos::
   0001                      87 	.ds 1
   0002                      88 _EEstados::
   0002                      89 	.ds 1
   0003                      90 _mapa::
   0003                      91 	.ds 2
   0005                      92 _num_mapa::
   0005                      93 	.ds 1
   0006                      94 _prota::
   0006                      95 	.ds 11
   0011                      96 _interrupcion_kk_1_78:
   0011                      97 	.ds 1
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
                            102 ;--------------------------------------------------------
                            103 ; absolute external ram data
                            104 ;--------------------------------------------------------
                            105 	.area _DABS (ABS)
                            106 ;--------------------------------------------------------
                            107 ; global & static initialisations
                            108 ;--------------------------------------------------------
                            109 	.area _HOME
                            110 	.area _GSINIT
                            111 	.area _GSFINAL
                            112 	.area _GSINIT
                            113 ;--------------------------------------------------------
                            114 ; Home
                            115 ;--------------------------------------------------------
                            116 	.area _HOME
                            117 	.area _HOME
                            118 ;--------------------------------------------------------
                            119 ; code
                            120 ;--------------------------------------------------------
                            121 	.area _CODE
                            122 ;src/main.c:125: cpctm_createTransparentMaskTable(g_tablatrans, 0x100, M0, 0);
                            123 ;	---------------------------------
                            124 ; Function dummy_cpct_transparentMaskTable0M0_container
                            125 ; ---------------------------------
   0000                     126 _dummy_cpct_transparentMaskTable0M0_container::
                            127 	.area _g_tablatrans_ (ABS) 
   0100                     128 	.org 0x100 
   0100                     129 	 _g_tablatrans::
   0100 FF AA 55 00 AA AA   130 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0108 55 00 55 00 00 00   131 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0110 AA AA 00 00 AA AA   132 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0118 00 00 00 00 00 00   133 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0120 55 00 55 00 00 00   134 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0128 55 00 55 00 00 00   135 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0130 00 00 00 00 00 00   136 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0138 00 00 00 00 00 00   137 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0140 AA AA 00 00 AA AA   138 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0148 00 00 00 00 00 00   139 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0150 AA AA 00 00 AA AA   140 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0158 00 00 00 00 00 00   141 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0160 00 00 00 00 00 00   142 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0168 00 00 00 00 00 00   143 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0170 00 00 00 00 00 00   144 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0178 00 00 00 00 00 00   145 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0180 55 00 55 00 00 00   146 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0188 55 00 55 00 00 00   147 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0190 00 00 00 00 00 00   148 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0198 00 00 00 00 00 00   149 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A0 55 00 55 00 00 00   150 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A8 55 00 55 00 00 00   151 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B0 00 00 00 00 00 00   152 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B8 00 00 00 00 00 00   153 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C0 00 00 00 00 00 00   154 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C8 00 00 00 00 00 00   155 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D0 00 00 00 00 00 00   156 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D8 00 00 00 00 00 00   157 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E0 00 00 00 00 00 00   158 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E8 00 00 00 00 00 00   159 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F0 00 00 00 00 00 00   160 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F8 00 00 00 00 00 00   161 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            162 	.area _CSEG (REL, CON) 
                            163 ;src/main.c:131: void playmusic() {
                            164 ;	---------------------------------
                            165 ; Function playmusic
                            166 ; ---------------------------------
   0000                     167 _playmusic::
                            168 ;src/main.c:146: __endasm;
   0000 D9            [ 4]  169 	exx
   0001 08                  170 	.db	#0x08
   0002 F5            [11]  171 	push	af
   0003 C5            [11]  172 	push	bc
   0004 D5            [11]  173 	push	de
   0005 E5            [11]  174 	push	hl
   0006 CDr00r00      [17]  175 	call	_cpct_akp_musicPlay
   0009 E1            [10]  176 	pop	hl
   000A D1            [10]  177 	pop	de
   000B C1            [10]  178 	pop	bc
   000C F1            [10]  179 	pop	af
   000D 08                  180 	.db	#0x08
   000E D9            [ 4]  181 	exx
   000F C9            [10]  182 	ret
                     0200   183 _G_song	=	0x0200
   0010                     184 _mapas:
   0010r00r00               185 	.dw _g_map1
   0012r00r00               186 	.dw _g_map2
   0014r00r00               187 	.dw _g_map3
   0016                     188 _g_frames:
   0016 00                  189 	.db #0x00	; 0
   0017r00r00               190 	.dw _g_hero_00
   0019 00                  191 	.db #0x00	; 0
   001Ar00r00               192 	.dw _g_hero_01
   001C 00                  193 	.db #0x00	; 0
   001Dr00r00               194 	.dw _g_hero_02
   001F 00                  195 	.db #0x00	; 0
   0020r00r00               196 	.dw _g_hero_03
   0022 00                  197 	.db #0x00	; 0
   0023r00r00               198 	.dw _g_hero_04
   0025 00                  199 	.db #0x00	; 0
   0026r00r00               200 	.dw _g_hero_05
   0028 00                  201 	.db #0x00	; 0
   0029r00r00               202 	.dw _g_hero_06
   002B 00                  203 	.db #0x00	; 0
   002Cr00r00               204 	.dw _g_hero_07
   002E 00                  205 	.db #0x00	; 0
   002Fr00r00               206 	.dw _g_hero_08
   0031 00                  207 	.db #0x00	; 0
   0032r00r00               208 	.dw _g_hero_09
   0034 00                  209 	.db #0x00	; 0
   0035r00r00               210 	.dw _g_hero_10
   0037 00                  211 	.db #0x00	; 0
   0038r00r00               212 	.dw _g_hero_11
   003A 00                  213 	.db #0x00	; 0
   003Br00r00               214 	.dw _g_hero_12
   003D 00                  215 	.db #0x00	; 0
   003Er00r00               216 	.dw _g_hero_13
   0040 00                  217 	.db #0x00	; 0
   0041r00r00               218 	.dw _g_hero_14
   0043 00                  219 	.db #0x00	; 0
   0044r00r00               220 	.dw _g_hero_15
   0046                     221 _anim_andar:
   0046r19r00               222 	.dw (_g_frames + 3)
   0048r1Cr00               223 	.dw (_g_frames + 6)
   004Ar1Fr00               224 	.dw (_g_frames + 9)
   004Cr22r00               225 	.dw (_g_frames + 12)
   004Er25r00               226 	.dw (_g_frames + 15)
   0050                     227 _anim_saltar:
   0050r2Er00               228 	.dw (_g_frames + 24)
   0052r31r00               229 	.dw (_g_frames + 27)
   0054r34r00               230 	.dw (_g_frames + 30)
   0056r37r00               231 	.dw (_g_frames + 33)
   0058                     232 _anim_caer:
   0058r40r00               233 	.dw (_g_frames + 42)
   005Ar43r00               234 	.dw (_g_frames + 45)
   005C                     235 _g_tablaSalto:
   005C FF                  236 	.db #0xFF	; 255
   005D FA                  237 	.db #0xFA	; 250
   005E A9                  238 	.db #0xA9	; 169
   005F 55                  239 	.db #0x55	; 85	'U'
   0060 40                  240 	.db #0x40	; 64
   0061 00                  241 	.db 0x00
                            242 ;src/main.c:149: void interrupcion() {
                            243 ;	---------------------------------
                            244 ; Function interrupcion
                            245 ; ---------------------------------
   0062                     246 _interrupcion::
                            247 ;src/main.c:152: if (++kk == 5) {
   0062 21r11r00      [10]  248 	ld	hl, #_interrupcion_kk_1_78+0
   0065 34            [11]  249 	inc	(hl)
   0066 3Ar11r00      [13]  250 	ld	a,(#_interrupcion_kk_1_78 + 0)
   0069 D6 05         [ 7]  251 	sub	a, #0x05
   006B C0            [11]  252 	ret	NZ
                            253 ;src/main.c:153: playmusic();
   006C CDr00r00      [17]  254 	call	_playmusic
                            255 ;src/main.c:154: cpct_scanKeyboard_if();
   006F CDr00r00      [17]  256 	call	_cpct_scanKeyboard_if
                            257 ;src/main.c:155: kk = 0;
   0072 21r11r00      [10]  258 	ld	hl,#_interrupcion_kk_1_78 + 0
   0075 36 00         [10]  259 	ld	(hl), #0x00
   0077 C9            [10]  260 	ret
                            261 ;src/main.c:159: void dibujarMapa() {
                            262 ;	---------------------------------
                            263 ; Function dibujarMapa
                            264 ; ---------------------------------
   0078                     265 _dibujarMapa::
                            266 ;src/main.c:160: cpct_etm_drawTilemap2x4(g_map1_W, g_map1_H, ORIGEN_MAPA, mapa);
   0078 2Ar03r00      [16]  267 	ld	hl,(_mapa)
   007B E5            [11]  268 	push	hl
   007C 21 80 E2      [10]  269 	ld	hl,#0xE280
   007F E5            [11]  270 	push	hl
   0080 21 21 28      [10]  271 	ld	hl,#0x2821
   0083 E5            [11]  272 	push	hl
   0084 2E 00         [ 7]  273 	ld	l, #0x00
   0086 E5            [11]  274 	push	hl
   0087 AF            [ 4]  275 	xor	a, a
   0088 F5            [11]  276 	push	af
   0089 33            [ 6]  277 	inc	sp
   008A CDr00r00      [17]  278 	call	_cpct_etm_drawTileBox2x4
   008D C9            [10]  279 	ret
                            280 ;src/main.c:163: void asignarFrame(TFrame **animacion) {
                            281 ;	---------------------------------
                            282 ; Function asignarFrame
                            283 ; ---------------------------------
   008E                     284 _asignarFrame::
   008E DD E5         [15]  285 	push	ix
   0090 DD 21 00 00   [14]  286 	ld	ix,#0
   0094 DD 39         [15]  287 	add	ix,sp
                            288 ;src/main.c:164: prota.frame = animacion[prota.nframe / ANIM_PAUSA];
   0096 21r0Er00      [10]  289 	ld	hl, #_prota + 8
   0099 6E            [ 7]  290 	ld	l,(hl)
   009A CB 3D         [ 8]  291 	srl	l
   009C CB 3D         [ 8]  292 	srl	l
   009E 26 00         [ 7]  293 	ld	h,#0x00
   00A0 29            [11]  294 	add	hl, hl
   00A1 4D            [ 4]  295 	ld	c, l
   00A2 44            [ 4]  296 	ld	b, h
   00A3 DD 6E 04      [19]  297 	ld	l,4 (ix)
   00A6 DD 66 05      [19]  298 	ld	h,5 (ix)
   00A9 09            [11]  299 	add	hl,bc
   00AA 4E            [ 7]  300 	ld	c,(hl)
   00AB 23            [ 6]  301 	inc	hl
   00AC 46            [ 7]  302 	ld	b,(hl)
   00AD ED 43r0Cr00   [20]  303 	ld	((_prota + 0x0006)), bc
   00B1 DD E1         [14]  304 	pop	ix
   00B3 C9            [10]  305 	ret
                            306 ;src/main.c:167: void girarFrame() {
                            307 ;	---------------------------------
                            308 ; Function girarFrame
                            309 ; ---------------------------------
   00B4                     310 _girarFrame::
                            311 ;src/main.c:168: TFrame* f = prota.frame;
   00B4 ED 4Br0Cr00   [20]  312 	ld	bc, (#_prota + 6)
                            313 ;src/main.c:169: if (f->mira != prota.mira) {
   00B8 0A            [ 7]  314 	ld	a,(bc)
   00B9 5F            [ 4]  315 	ld	e,a
   00BA 21r0Fr00      [10]  316 	ld	hl, #(_prota + 0x0009) + 0
   00BD 56            [ 7]  317 	ld	d,(hl)
   00BE 7B            [ 4]  318 	ld	a,e
   00BF 92            [ 4]  319 	sub	a, d
   00C0 C8            [11]  320 	ret	Z
                            321 ;src/main.c:170: cpct_hflipSpriteM0(G_HERO_00_W, G_HERO_00_H, f->sprite);
   00C1 69            [ 4]  322 	ld	l, c
   00C2 60            [ 4]  323 	ld	h, b
   00C3 23            [ 6]  324 	inc	hl
   00C4 5E            [ 7]  325 	ld	e,(hl)
   00C5 23            [ 6]  326 	inc	hl
   00C6 56            [ 7]  327 	ld	d,(hl)
   00C7 C5            [11]  328 	push	bc
   00C8 D5            [11]  329 	push	de
   00C9 21 08 1B      [10]  330 	ld	hl,#0x1B08
   00CC E5            [11]  331 	push	hl
   00CD CDr00r00      [17]  332 	call	_cpct_hflipSpriteM0
   00D0 C1            [10]  333 	pop	bc
                            334 ;src/main.c:171: f->mira = prota.mira;
   00D1 3Ar0Fr00      [13]  335 	ld	a, (#(_prota + 0x0009) + 0)
   00D4 02            [ 7]  336 	ld	(bc),a
   00D5 C9            [10]  337 	ret
                            338 ;src/main.c:175: void seleccionarSpriteProta() {
                            339 ;	---------------------------------
                            340 ; Function seleccionarSpriteProta
                            341 ; ---------------------------------
   00D6                     342 _seleccionarSpriteProta::
                            343 ;src/main.c:176: switch(prota.estado) {
   00D6 21r0Br00      [10]  344 	ld	hl, #_prota + 5
   00D9 5E            [ 7]  345 	ld	e,(hl)
   00DA 3E 05         [ 7]  346 	ld	a,#0x05
   00DC 93            [ 4]  347 	sub	a, e
   00DD DArB4r00      [10]  348 	jp	C,_girarFrame
                            349 ;src/main.c:177: case ST_quieto:      { prota.frame = &g_frames[0];  break; }
                            350 ;src/main.c:176: switch(prota.estado) {
   00E0 16 00         [ 7]  351 	ld	d,#0x00
   00E2 21rE8r00      [10]  352 	ld	hl,#00114$
   00E5 19            [11]  353 	add	hl,de
   00E6 19            [11]  354 	add	hl,de
                            355 ;src/main.c:177: case ST_quieto:      { prota.frame = &g_frames[0];  break; }
   00E7 E9            [ 4]  356 	jp	(hl)
   00E8                     357 00114$:
   00E8 18 0A         [12]  358 	jr	00101$
   00EA 18 11         [12]  359 	jr	00102$
   00EC 18 1A         [12]  360 	jr	00103$
   00EE 18 23         [12]  361 	jr	00104$
   00F0 18 2A         [12]  362 	jr	00105$
   00F2 18 31         [12]  363 	jr	00106$
   00F4                     364 00101$:
   00F4 21r16r00      [10]  365 	ld	hl,#_g_frames
   00F7 22r0Cr00      [16]  366 	ld	((_prota + 0x0006)), hl
   00FA C3rB4r00      [10]  367 	jp	_girarFrame
                            368 ;src/main.c:178: case ST_andando:     { asignarFrame(anim_andar);    break; }
   00FD                     369 00102$:
   00FD 21r46r00      [10]  370 	ld	hl,#_anim_andar
   0100 E5            [11]  371 	push	hl
   0101 CDr8Er00      [17]  372 	call	_asignarFrame
   0104 F1            [10]  373 	pop	af
   0105 C3rB4r00      [10]  374 	jp	_girarFrame
                            375 ;src/main.c:179: case ST_prepSalto:   { asignarFrame(anim_saltar);   break; }
   0108                     376 00103$:
   0108 21r50r00      [10]  377 	ld	hl,#_anim_saltar
   010B E5            [11]  378 	push	hl
   010C CDr8Er00      [17]  379 	call	_asignarFrame
   010F F1            [10]  380 	pop	af
   0110 C3rB4r00      [10]  381 	jp	_girarFrame
                            382 ;src/main.c:180: case ST_saltando:    { prota.frame = &g_frames[12]; break; }
   0113                     383 00104$:
   0113 21r3Ar00      [10]  384 	ld	hl,#(_g_frames + 0x0024)
   0116 22r0Cr00      [16]  385 	ld	((_prota + 0x0006)), hl
   0119 C3rB4r00      [10]  386 	jp	_girarFrame
                            387 ;src/main.c:181: case ST_cayendo:     { prota.frame = &g_frames[13]; break; }
   011C                     388 00105$:
   011C 21r3Dr00      [10]  389 	ld	hl,#(_g_frames + 0x0027)
   011F 22r0Cr00      [16]  390 	ld	((_prota + 0x0006)), hl
   0122 C3rB4r00      [10]  391 	jp	_girarFrame
                            392 ;src/main.c:182: case ST_aterrizando: { asignarFrame(anim_caer);     break; }
   0125                     393 00106$:
   0125 21r58r00      [10]  394 	ld	hl,#_anim_caer
   0128 E5            [11]  395 	push	hl
   0129 CDr8Er00      [17]  396 	call	_asignarFrame
   012C F1            [10]  397 	pop	af
                            398 ;src/main.c:183: }
                            399 ;src/main.c:184: girarFrame();
   012D C3rB4r00      [10]  400 	jp  _girarFrame
                            401 ;src/main.c:187: void dibujarProta() {
                            402 ;	---------------------------------
                            403 ; Function dibujarProta
                            404 ; ---------------------------------
   0130                     405 _dibujarProta::
                            406 ;src/main.c:188: u8* pvmem = cpct_getScreenPtr(CPCT_VMEM_START, prota.x, prota.y);
   0130 21r07r00      [10]  407 	ld	hl, #_prota + 1
   0133 56            [ 7]  408 	ld	d,(hl)
   0134 21r06r00      [10]  409 	ld	hl, #_prota + 0
   0137 46            [ 7]  410 	ld	b,(hl)
   0138 D5            [11]  411 	push	de
   0139 33            [ 6]  412 	inc	sp
   013A C5            [11]  413 	push	bc
   013B 33            [ 6]  414 	inc	sp
   013C 21 00 C0      [10]  415 	ld	hl,#0xC000
   013F E5            [11]  416 	push	hl
   0140 CDr00r00      [17]  417 	call	_cpct_getScreenPtr
   0143 EB            [ 4]  418 	ex	de,hl
                            419 ;src/main.c:189: cpct_drawSpriteMaskedAlignedTable(prota.frame->sprite, pvmem, G_HERO_00_W, G_HERO_00_H, g_tablatrans);
   0144 2Ar0Cr00      [16]  420 	ld	hl, (#_prota + 6)
   0147 23            [ 6]  421 	inc	hl
   0148 4E            [ 7]  422 	ld	c,(hl)
   0149 23            [ 6]  423 	inc	hl
   014A 46            [ 7]  424 	ld	b,(hl)
   014B 21r00r01      [10]  425 	ld	hl,#_g_tablatrans
   014E E5            [11]  426 	push	hl
   014F 21 08 1B      [10]  427 	ld	hl,#0x1B08
   0152 E5            [11]  428 	push	hl
   0153 D5            [11]  429 	push	de
   0154 C5            [11]  430 	push	bc
   0155 CDr00r00      [17]  431 	call	_cpct_drawSpriteMaskedAlignedTable
   0158 C9            [10]  432 	ret
                            433 ;src/main.c:192: void borrarProta() {
                            434 ;	---------------------------------
                            435 ; Function borrarProta
                            436 ; ---------------------------------
   0159                     437 _borrarProta::
   0159 DD E5         [15]  438 	push	ix
   015B DD 21 00 00   [14]  439 	ld	ix,#0
   015F DD 39         [15]  440 	add	ix,sp
   0161 F5            [11]  441 	push	af
   0162 3B            [ 6]  442 	dec	sp
                            443 ;src/main.c:193: u8 w = 4 + (prota.px & 1);
   0163 21r08r00      [10]  444 	ld	hl, #_prota + 2
   0166 4E            [ 7]  445 	ld	c,(hl)
   0167 79            [ 4]  446 	ld	a,c
   0168 E6 01         [ 7]  447 	and	a, #0x01
   016A 47            [ 4]  448 	ld	b,a
   016B 04            [ 4]  449 	inc	b
   016C 04            [ 4]  450 	inc	b
   016D 04            [ 4]  451 	inc	b
   016E 04            [ 4]  452 	inc	b
                            453 ;src/main.c:194: u8 h = 7 + (prota.py & 3 ? 1 : 0);
   016F 21r09r00      [10]  454 	ld	hl, #_prota + 3
   0172 5E            [ 7]  455 	ld	e,(hl)
   0173 7B            [ 4]  456 	ld	a,e
   0174 E6 03         [ 7]  457 	and	a, #0x03
   0176 28 04         [12]  458 	jr	Z,00103$
   0178 3E 01         [ 7]  459 	ld	a,#0x01
   017A 18 02         [12]  460 	jr	00104$
   017C                     461 00103$:
   017C 3E 00         [ 7]  462 	ld	a,#0x00
   017E                     463 00104$:
   017E C6 07         [ 7]  464 	add	a, #0x07
   0180 DD 77 FD      [19]  465 	ld	-3 (ix),a
                            466 ;src/main.c:195: cpct_etm_drawTileBox2x4(prota.px / 2, (prota.py-ORIGEN_MAPA_Y) / 4, w, h, 40, ORIGEN_MAPA, mapa);
   0183 FD 2Ar03r00   [20]  467 	ld	iy,(_mapa)
   0187 16 00         [ 7]  468 	ld	d,#0x00
   0189 7B            [ 4]  469 	ld	a,e
   018A C6 BC         [ 7]  470 	add	a,#0xBC
   018C DD 77 FE      [19]  471 	ld	-2 (ix),a
   018F 7A            [ 4]  472 	ld	a,d
   0190 CE FF         [ 7]  473 	adc	a,#0xFF
   0192 DD 77 FF      [19]  474 	ld	-1 (ix),a
   0195 DD 6E FE      [19]  475 	ld	l,-2 (ix)
   0198 DD 66 FF      [19]  476 	ld	h,-1 (ix)
   019B DD CB FF 7E   [20]  477 	bit	7, -1 (ix)
   019F 28 04         [12]  478 	jr	Z,00105$
   01A1 21 BF FF      [10]  479 	ld	hl,#0xFFBF
   01A4 19            [11]  480 	add	hl,de
   01A5                     481 00105$:
   01A5 CB 2C         [ 8]  482 	sra	h
   01A7 CB 1D         [ 8]  483 	rr	l
   01A9 CB 2C         [ 8]  484 	sra	h
   01AB CB 1D         [ 8]  485 	rr	l
   01AD 55            [ 4]  486 	ld	d,l
   01AE CB 39         [ 8]  487 	srl	c
   01B0 FD E5         [15]  488 	push	iy
   01B2 21 80 E2      [10]  489 	ld	hl,#0xE280
   01B5 E5            [11]  490 	push	hl
   01B6 3E 28         [ 7]  491 	ld	a,#0x28
   01B8 F5            [11]  492 	push	af
   01B9 33            [ 6]  493 	inc	sp
   01BA DD 7E FD      [19]  494 	ld	a,-3 (ix)
   01BD F5            [11]  495 	push	af
   01BE 33            [ 6]  496 	inc	sp
   01BF C5            [11]  497 	push	bc
   01C0 33            [ 6]  498 	inc	sp
   01C1 D5            [11]  499 	push	de
   01C2 33            [ 6]  500 	inc	sp
   01C3 79            [ 4]  501 	ld	a,c
   01C4 F5            [11]  502 	push	af
   01C5 33            [ 6]  503 	inc	sp
   01C6 CDr00r00      [17]  504 	call	_cpct_etm_drawTileBox2x4
   01C9 DD F9         [10]  505 	ld	sp, ix
   01CB DD E1         [14]  506 	pop	ix
   01CD C9            [10]  507 	ret
                            508 ;src/main.c:198: u8* obtenerTilePtr(u8 x, u8 y) {
                            509 ;	---------------------------------
                            510 ; Function obtenerTilePtr
                            511 ; ---------------------------------
   01CE                     512 _obtenerTilePtr::
   01CE DD E5         [15]  513 	push	ix
   01D0 DD 21 00 00   [14]  514 	ld	ix,#0
   01D4 DD 39         [15]  515 	add	ix,sp
                            516 ;src/main.c:199: return mapa + (y-ORIGEN_MAPA_Y)/4*g_map1_W + x/2;
   01D6 DD 4E 05      [19]  517 	ld	c,5 (ix)
   01D9 06 00         [ 7]  518 	ld	b,#0x00
   01DB 79            [ 4]  519 	ld	a,c
   01DC C6 BC         [ 7]  520 	add	a,#0xBC
   01DE 5F            [ 4]  521 	ld	e,a
   01DF 78            [ 4]  522 	ld	a,b
   01E0 CE FF         [ 7]  523 	adc	a,#0xFF
   01E2 57            [ 4]  524 	ld	d,a
   01E3 6B            [ 4]  525 	ld	l, e
   01E4 62            [ 4]  526 	ld	h, d
   01E5 CB 7A         [ 8]  527 	bit	7, d
   01E7 28 04         [12]  528 	jr	Z,00103$
   01E9 21 BF FF      [10]  529 	ld	hl,#0xFFBF
   01EC 09            [11]  530 	add	hl,bc
   01ED                     531 00103$:
   01ED CB 2C         [ 8]  532 	sra	h
   01EF CB 1D         [ 8]  533 	rr	l
   01F1 CB 2C         [ 8]  534 	sra	h
   01F3 CB 1D         [ 8]  535 	rr	l
   01F5 4D            [ 4]  536 	ld	c, l
   01F6 44            [ 4]  537 	ld	b, h
   01F7 29            [11]  538 	add	hl, hl
   01F8 29            [11]  539 	add	hl, hl
   01F9 09            [11]  540 	add	hl, bc
   01FA 29            [11]  541 	add	hl, hl
   01FB 29            [11]  542 	add	hl, hl
   01FC 29            [11]  543 	add	hl, hl
   01FD 4D            [ 4]  544 	ld	c,l
   01FE 44            [ 4]  545 	ld	b,h
   01FF 2Ar03r00      [16]  546 	ld	hl,(_mapa)
   0202 09            [11]  547 	add	hl,bc
   0203 DD 4E 04      [19]  548 	ld	c,4 (ix)
   0206 CB 39         [ 8]  549 	srl	c
   0208 59            [ 4]  550 	ld	e,c
   0209 16 00         [ 7]  551 	ld	d,#0x00
   020B 19            [11]  552 	add	hl,de
   020C DD E1         [14]  553 	pop	ix
   020E C9            [10]  554 	ret
                            555 ;src/main.c:202: void ajustarAlSuelo() {
                            556 ;	---------------------------------
                            557 ; Function ajustarAlSuelo
                            558 ; ---------------------------------
   020F                     559 _ajustarAlSuelo::
                            560 ;src/main.c:203: prota.y = (prota.y & 0b11111100) + 1;
   020F 01r07r00      [10]  561 	ld	bc,#_prota+1
   0212 0A            [ 7]  562 	ld	a,(bc)
   0213 E6 FC         [ 7]  563 	and	a, #0xFC
   0215 3C            [ 4]  564 	inc	a
   0216 02            [ 7]  565 	ld	(bc),a
   0217 C9            [10]  566 	ret
                            567 ;src/main.c:206: u8 sobreSuelo() {
                            568 ;	---------------------------------
                            569 ; Function sobreSuelo
                            570 ; ---------------------------------
   0218                     571 _sobreSuelo::
                            572 ;src/main.c:207: u8* tileSuelo = obtenerTilePtr(prota.x+2, prota.y + ALTOPROTA+1);
   0218 3Ar07r00      [13]  573 	ld	a, (#_prota + 1)
   021B C6 1C         [ 7]  574 	add	a, #0x1C
   021D 57            [ 4]  575 	ld	d,a
   021E 21r06r00      [10]  576 	ld	hl, #_prota + 0
   0221 46            [ 7]  577 	ld	b,(hl)
   0222 04            [ 4]  578 	inc	b
   0223 04            [ 4]  579 	inc	b
   0224 D5            [11]  580 	push	de
   0225 33            [ 6]  581 	inc	sp
   0226 C5            [11]  582 	push	bc
   0227 33            [ 6]  583 	inc	sp
   0228 CDrCEr01      [17]  584 	call	_obtenerTilePtr
   022B F1            [10]  585 	pop	af
                            586 ;src/main.c:208: if (*tileSuelo < 4 || *(tileSuelo+G_HERO_00_W/2-3) < 4)
   022C 7E            [ 7]  587 	ld	a, (hl)
   022D D6 04         [ 7]  588 	sub	a, #0x04
   022F 38 06         [12]  589 	jr	C,00101$
   0231 23            [ 6]  590 	inc	hl
   0232 7E            [ 7]  591 	ld	a, (hl)
   0233 D6 04         [ 7]  592 	sub	a, #0x04
   0235 30 03         [12]  593 	jr	NC,00102$
   0237                     594 00101$:
                            595 ;src/main.c:209: return 1;
   0237 2E 01         [ 7]  596 	ld	l,#0x01
   0239 C9            [10]  597 	ret
   023A                     598 00102$:
                            599 ;src/main.c:211: return 0;
   023A 2E 00         [ 7]  600 	ld	l,#0x00
   023C C9            [10]  601 	ret
                            602 ;src/main.c:214: void avanzarMapa() {
                            603 ;	---------------------------------
                            604 ; Function avanzarMapa
                            605 ; ---------------------------------
   023D                     606 _avanzarMapa::
                            607 ;src/main.c:215: if (num_mapa < NUM_MAPAS-1) {
   023D 3Ar05r00      [13]  608 	ld	a,(#_num_mapa + 0)
   0240 D6 02         [ 7]  609 	sub	a, #0x02
   0242 D0            [11]  610 	ret	NC
                            611 ;src/main.c:216: mapa = mapas[++num_mapa];
   0243 01r10r00      [10]  612 	ld	bc,#_mapas+0
   0246 21r05r00      [10]  613 	ld	hl, #_num_mapa+0
   0249 34            [11]  614 	inc	(hl)
   024A FD 21r05r00   [14]  615 	ld	iy,#_num_mapa
   024E FD 6E 00      [19]  616 	ld	l,0 (iy)
   0251 26 00         [ 7]  617 	ld	h,#0x00
   0253 29            [11]  618 	add	hl, hl
   0254 09            [11]  619 	add	hl,bc
   0255 7E            [ 7]  620 	ld	a,(hl)
   0256 FD 21r03r00   [14]  621 	ld	iy,#_mapa
   025A FD 77 00      [19]  622 	ld	0 (iy),a
   025D 23            [ 6]  623 	inc	hl
   025E 7E            [ 7]  624 	ld	a,(hl)
   025F 32r04r00      [13]  625 	ld	(#_mapa + 1),a
                            626 ;src/main.c:217: prota.x = prota.px = 0;
   0262 21r08r00      [10]  627 	ld	hl,#(_prota + 0x0002)
   0265 36 00         [10]  628 	ld	(hl),#0x00
   0267 21r06r00      [10]  629 	ld	hl,#_prota
   026A 36 00         [10]  630 	ld	(hl),#0x00
                            631 ;src/main.c:218: prota.mover = SI;
   026C 21r0Ar00      [10]  632 	ld	hl,#(_prota + 0x0004)
   026F 36 01         [10]  633 	ld	(hl),#0x01
                            634 ;src/main.c:219: dibujarMapa();
   0271 C3r78r00      [10]  635 	jp  _dibujarMapa
                            636 ;src/main.c:223: void retrocederMapa() {
                            637 ;	---------------------------------
                            638 ; Function retrocederMapa
                            639 ; ---------------------------------
   0274                     640 _retrocederMapa::
                            641 ;src/main.c:224: if (num_mapa > 0) {
   0274 3Ar05r00      [13]  642 	ld	a,(#_num_mapa + 0)
   0277 B7            [ 4]  643 	or	a, a
   0278 C8            [11]  644 	ret	Z
                            645 ;src/main.c:225: mapa = mapas[--num_mapa];
   0279 01r10r00      [10]  646 	ld	bc,#_mapas+0
   027C 21r05r00      [10]  647 	ld	hl, #_num_mapa+0
   027F 35            [11]  648 	dec	(hl)
   0280 FD 21r05r00   [14]  649 	ld	iy,#_num_mapa
   0284 FD 6E 00      [19]  650 	ld	l,0 (iy)
   0287 26 00         [ 7]  651 	ld	h,#0x00
   0289 29            [11]  652 	add	hl, hl
   028A 09            [11]  653 	add	hl,bc
   028B 7E            [ 7]  654 	ld	a,(hl)
   028C FD 21r03r00   [14]  655 	ld	iy,#_mapa
   0290 FD 77 00      [19]  656 	ld	0 (iy),a
   0293 23            [ 6]  657 	inc	hl
   0294 7E            [ 7]  658 	ld	a,(hl)
   0295 32r04r00      [13]  659 	ld	(#_mapa + 1),a
                            660 ;src/main.c:226: prota.x = prota.px = ANCHO - G_HERO_00_W;
   0298 21r08r00      [10]  661 	ld	hl,#(_prota + 0x0002)
   029B 36 48         [10]  662 	ld	(hl),#0x48
   029D 21r06r00      [10]  663 	ld	hl,#_prota
   02A0 36 48         [10]  664 	ld	(hl),#0x48
                            665 ;src/main.c:227: prota.mover = SI;
   02A2 21r0Ar00      [10]  666 	ld	hl,#(_prota + 0x0004)
   02A5 36 01         [10]  667 	ld	(hl),#0x01
                            668 ;src/main.c:228: dibujarMapa();
   02A7 C3r78r00      [10]  669 	jp  _dibujarMapa
                            670 ;src/main.c:232: void moverDerecha() { 
                            671 ;	---------------------------------
                            672 ; Function moverDerecha
                            673 ; ---------------------------------
   02AA                     674 _moverDerecha::
                            675 ;src/main.c:233: if (prota.x + G_HERO_00_W < ANCHO) {
   02AA 21r06r00      [10]  676 	ld	hl, #_prota + 0
   02AD 4E            [ 7]  677 	ld	c,(hl)
   02AE 59            [ 4]  678 	ld	e,c
   02AF 16 00         [ 7]  679 	ld	d,#0x00
   02B1 21 08 00      [10]  680 	ld	hl,#0x0008
   02B4 19            [11]  681 	add	hl,de
   02B5 11 50 80      [10]  682 	ld	de, #0x8050
   02B8 29            [11]  683 	add	hl, hl
   02B9 3F            [ 4]  684 	ccf
   02BA CB 1C         [ 8]  685 	rr	h
   02BC CB 1D         [ 8]  686 	rr	l
   02BE ED 52         [15]  687 	sbc	hl, de
   02C0 D2r3Dr02      [10]  688 	jp	NC,_avanzarMapa
                            689 ;src/main.c:234: prota.x++;
   02C3 0C            [ 4]  690 	inc	c
   02C4 21r06r00      [10]  691 	ld	hl,#_prota
   02C7 71            [ 7]  692 	ld	(hl),c
                            693 ;src/main.c:235: prota.mira  = M_derecha;
   02C8 21r0Fr00      [10]  694 	ld	hl,#(_prota + 0x0009)
   02CB 36 00         [10]  695 	ld	(hl),#0x00
   02CD C9            [10]  696 	ret
                            697 ;src/main.c:237: avanzarMapa();
   02CE C3r3Dr02      [10]  698 	jp  _avanzarMapa
                            699 ;src/main.c:241: void moverIzquierda() {
                            700 ;	---------------------------------
                            701 ; Function moverIzquierda
                            702 ; ---------------------------------
   02D1                     703 _moverIzquierda::
                            704 ;src/main.c:242: if (prota.x > 0) {
   02D1 01r06r00      [10]  705 	ld	bc,#_prota+0
   02D4 0A            [ 7]  706 	ld	a,(bc)
   02D5 B7            [ 4]  707 	or	a, a
   02D6 CAr74r02      [10]  708 	jp	Z,_retrocederMapa
                            709 ;src/main.c:243: prota.x--;
   02D9 C6 FF         [ 7]  710 	add	a,#0xFF
   02DB 02            [ 7]  711 	ld	(bc),a
                            712 ;src/main.c:244: prota.mira  = M_izquierda;
   02DC 21r0Fr00      [10]  713 	ld	hl,#(_prota + 0x0009)
   02DF 36 01         [10]  714 	ld	(hl),#0x01
   02E1 C9            [10]  715 	ret
                            716 ;src/main.c:246: retrocederMapa();
   02E2 C3r74r02      [10]  717 	jp  _retrocederMapa
                            718 ;src/main.c:250: void redibujarProta() {
                            719 ;	---------------------------------
                            720 ; Function redibujarProta
                            721 ; ---------------------------------
   02E5                     722 _redibujarProta::
                            723 ;src/main.c:251: borrarProta();
   02E5 CDr59r01      [17]  724 	call	_borrarProta
                            725 ;src/main.c:252: prota.px = prota.x;
   02E8 01r08r00      [10]  726 	ld	bc,#_prota + 2
   02EB 3Ar06r00      [13]  727 	ld	a, (#_prota + 0)
   02EE 02            [ 7]  728 	ld	(bc),a
                            729 ;src/main.c:253: prota.py = prota.y;
   02EF 01r09r00      [10]  730 	ld	bc,#_prota + 3
   02F2 3Ar07r00      [13]  731 	ld	a, (#_prota + 1)
   02F5 02            [ 7]  732 	ld	(bc),a
                            733 ;src/main.c:254: dibujarProta();
   02F6 C3r30r01      [10]  734 	jp  _dibujarProta
                            735 ;src/main.c:257: u8 compruebaTeclas(const cpct_keyID* k, u8 numk) {
                            736 ;	---------------------------------
                            737 ; Function compruebaTeclas
                            738 ; ---------------------------------
   02F9                     739 _compruebaTeclas::
   02F9 DD E5         [15]  740 	push	ix
   02FB DD 21 00 00   [14]  741 	ld	ix,#0
   02FF DD 39         [15]  742 	add	ix,sp
                            743 ;src/main.c:260: if (cpct_isAnyKeyPressed()) {
   0301 CDr00r00      [17]  744 	call	_cpct_isAnyKeyPressed
   0304 7D            [ 4]  745 	ld	a,l
   0305 B7            [ 4]  746 	or	a, a
   0306 28 29         [12]  747 	jr	Z,00105$
                            748 ;src/main.c:261: for(i=1; i <= numk; i++, k++) {
   0308 01 01 01      [10]  749 	ld	bc,#0x0101
   030B DD 5E 04      [19]  750 	ld	e,4 (ix)
   030E DD 56 05      [19]  751 	ld	d,5 (ix)
   0311                     752 00107$:
   0311 DD 7E 06      [19]  753 	ld	a,6 (ix)
   0314 90            [ 4]  754 	sub	a, b
   0315 38 1A         [12]  755 	jr	C,00105$
                            756 ;src/main.c:262: if (cpct_isKeyPressed(*k))
   0317 6B            [ 4]  757 	ld	l, e
   0318 62            [ 4]  758 	ld	h, d
   0319 7E            [ 7]  759 	ld	a, (hl)
   031A 23            [ 6]  760 	inc	hl
   031B 66            [ 7]  761 	ld	h,(hl)
   031C 6F            [ 4]  762 	ld	l,a
   031D C5            [11]  763 	push	bc
   031E D5            [11]  764 	push	de
   031F CDr00r00      [17]  765 	call	_cpct_isKeyPressed
   0322 D1            [10]  766 	pop	de
   0323 C1            [10]  767 	pop	bc
   0324 7D            [ 4]  768 	ld	a,l
   0325 B7            [ 4]  769 	or	a, a
   0326 28 03         [12]  770 	jr	Z,00108$
                            771 ;src/main.c:263: return i;
   0328 69            [ 4]  772 	ld	l,c
   0329 18 08         [12]  773 	jr	00109$
   032B                     774 00108$:
                            775 ;src/main.c:261: for(i=1; i <= numk; i++, k++) {
   032B 04            [ 4]  776 	inc	b
   032C 48            [ 4]  777 	ld	c,b
   032D 13            [ 6]  778 	inc	de
   032E 13            [ 6]  779 	inc	de
   032F 18 E0         [12]  780 	jr	00107$
   0331                     781 00105$:
                            782 ;src/main.c:266: return 0;
   0331 2E 00         [ 7]  783 	ld	l,#0x00
   0333                     784 00109$:
   0333 DD E1         [14]  785 	pop	ix
   0335 C9            [10]  786 	ret
                            787 ;src/main.c:271: void aterrizando_entrar() {
                            788 ;	---------------------------------
                            789 ; Function aterrizando_entrar
                            790 ; ---------------------------------
   0336                     791 _aterrizando_entrar::
                            792 ;src/main.c:272: prota.nframe = 0;
   0336 21r0Er00      [10]  793 	ld	hl,#(_prota + 0x0008)
   0339 36 00         [10]  794 	ld	(hl),#0x00
                            795 ;src/main.c:273: prota.estado = ST_aterrizando;
   033B 21r0Br00      [10]  796 	ld	hl,#(_prota + 0x0005)
   033E 36 05         [10]  797 	ld	(hl),#0x05
                            798 ;src/main.c:274: prota.mover  = SI;
   0340 21r0Ar00      [10]  799 	ld	hl,#(_prota + 0x0004)
   0343 36 01         [10]  800 	ld	(hl),#0x01
   0345 C9            [10]  801 	ret
                            802 ;src/main.c:277: void aterrizando() {
                            803 ;	---------------------------------
                            804 ; Function aterrizando
                            805 ; ---------------------------------
   0346                     806 _aterrizando::
                            807 ;src/main.c:278: prota.mover = SI;
   0346 21r0Ar00      [10]  808 	ld	hl,#(_prota + 0x0004)
   0349 36 01         [10]  809 	ld	(hl),#0x01
                            810 ;src/main.c:279: if(++prota.nframe == CAER_FRAMES*ANIM_PAUSA)
   034B 01r0Er00      [10]  811 	ld	bc,#_prota + 8
   034E 0A            [ 7]  812 	ld	a,(bc)
   034F 3C            [ 4]  813 	inc	a
   0350 02            [ 7]  814 	ld	(bc),a
   0351 D6 08         [ 7]  815 	sub	a, #0x08
   0353 C0            [11]  816 	ret	NZ
                            817 ;src/main.c:280: quieto_entrar();      
   0354 C3rD3r03      [10]  818 	jp  _quieto_entrar
                            819 ;src/main.c:283: void cayendo_entrar() {
                            820 ;	---------------------------------
                            821 ; Function cayendo_entrar
                            822 ; ---------------------------------
   0357                     823 _cayendo_entrar::
                            824 ;src/main.c:284: prota.estado = ST_cayendo;
   0357 21r0Br00      [10]  825 	ld	hl,#(_prota + 0x0005)
   035A 36 04         [10]  826 	ld	(hl),#0x04
                            827 ;src/main.c:285: prota.mover  = SI;
   035C 21r0Ar00      [10]  828 	ld	hl,#(_prota + 0x0004)
   035F 36 01         [10]  829 	ld	(hl),#0x01
                            830 ;src/main.c:286: prota.salto  = PASOS_SALTO - 3;
   0361 21r10r00      [10]  831 	ld	hl,#(_prota + 0x000a)
   0364 36 11         [10]  832 	ld	(hl),#0x11
   0366 C9            [10]  833 	ret
                            834 ;src/main.c:289: void descender() {
                            835 ;	---------------------------------
                            836 ; Function descender
                            837 ; ---------------------------------
   0367                     838 _descender::
                            839 ;src/main.c:290: prota.y += cpct_get2Bits(g_tablaSalto, prota.salto);
   0367 21r07r00      [10]  840 	ld	hl, #(_prota + 0x0001) + 0
   036A 4E            [ 7]  841 	ld	c,(hl)
   036B 21r10r00      [10]  842 	ld	hl, #(_prota + 0x000a) + 0
   036E 5E            [ 7]  843 	ld	e,(hl)
   036F 16 00         [ 7]  844 	ld	d,#0x00
   0371 C5            [11]  845 	push	bc
   0372 D5            [11]  846 	push	de
   0373 21r5Cr00      [10]  847 	ld	hl,#_g_tablaSalto
   0376 E5            [11]  848 	push	hl
   0377 CDr00r00      [17]  849 	call	_cpct_get2Bits
   037A C1            [10]  850 	pop	bc
   037B 79            [ 4]  851 	ld	a,c
   037C 85            [ 4]  852 	add	a, l
   037D 32r07r00      [13]  853 	ld	(#(_prota + 0x0001)),a
                            854 ;src/main.c:291: if (prota.salto > 1)
   0380 21r10r00      [10]  855 	ld	hl, #(_prota + 0x000a) + 0
   0383 4E            [ 7]  856 	ld	c,(hl)
   0384 3E 01         [ 7]  857 	ld	a,#0x01
   0386 91            [ 4]  858 	sub	a, c
   0387 D0            [11]  859 	ret	NC
                            860 ;src/main.c:292: prota.salto--;
   0388 0D            [ 4]  861 	dec	c
   0389 21r10r00      [10]  862 	ld	hl,#(_prota + 0x000a)
   038C 71            [ 7]  863 	ld	(hl),c
   038D C9            [10]  864 	ret
                            865 ;src/main.c:295: void cayendo() {
                            866 ;	---------------------------------
                            867 ; Function cayendo
                            868 ; ---------------------------------
   038E                     869 _cayendo::
                            870 ;src/main.c:297: u8 k = compruebaTeclas(keys, 2);
   038E 3E 02         [ 7]  871 	ld	a,#0x02
   0390 F5            [11]  872 	push	af
   0391 33            [ 6]  873 	inc	sp
   0392 21rCFr03      [10]  874 	ld	hl,#_cayendo_keys_1_118
   0395 E5            [11]  875 	push	hl
   0396 CDrF9r02      [17]  876 	call	_compruebaTeclas
   0399 F1            [10]  877 	pop	af
   039A 33            [ 6]  878 	inc	sp
   039B 5D            [ 4]  879 	ld	e,l
                            880 ;src/main.c:298: switch(k) {
   039C 3E 02         [ 7]  881 	ld	a,#0x02
   039E 93            [ 4]  882 	sub	a, e
   039F 38 18         [12]  883 	jr	C,00104$
   03A1 16 00         [ 7]  884 	ld	d,#0x00
   03A3 21rA9r03      [10]  885 	ld	hl,#00117$
   03A6 19            [11]  886 	add	hl,de
   03A7 19            [11]  887 	add	hl,de
                            888 ;src/main.c:299: case 0: break; // Nada que hacer
                            889 ;src/main.c:300: case 1: moverDerecha();   break;
   03A8 E9            [ 4]  890 	jp	(hl)
   03A9                     891 00117$:
   03A9 18 0E         [12]  892 	jr	00104$
   03AB 18 04         [12]  893 	jr	00102$
   03AD 18 07         [12]  894 	jr	00103$
   03AF 18 08         [12]  895 	jr	00104$
   03B1                     896 00102$:
   03B1 CDrAAr02      [17]  897 	call	_moverDerecha
   03B4 18 03         [12]  898 	jr	00104$
                            899 ;src/main.c:301: case 2: moverIzquierda(); break;
   03B6                     900 00103$:
   03B6 CDrD1r02      [17]  901 	call	_moverIzquierda
                            902 ;src/main.c:302: }
   03B9                     903 00104$:
                            904 ;src/main.c:303: descender();
   03B9 CDr67r03      [17]  905 	call	_descender
                            906 ;src/main.c:304: if (sobreSuelo()) {
   03BC CDr18r02      [17]  907 	call	_sobreSuelo
   03BF 7D            [ 4]  908 	ld	a,l
   03C0 B7            [ 4]  909 	or	a, a
   03C1 28 06         [12]  910 	jr	Z,00106$
                            911 ;src/main.c:305: ajustarAlSuelo();
   03C3 CDr0Fr02      [17]  912 	call	_ajustarAlSuelo
                            913 ;src/main.c:306: aterrizando_entrar();
   03C6 CDr36r03      [17]  914 	call	_aterrizando_entrar
   03C9                     915 00106$:
                            916 ;src/main.c:308: prota.mover=SI;
   03C9 21r0Ar00      [10]  917 	ld	hl,#(_prota + 0x0004)
   03CC 36 01         [10]  918 	ld	(hl),#0x01
   03CE C9            [10]  919 	ret
   03CF                     920 _cayendo_keys_1_118:
   03CF 00 02               921 	.dw #0x0200
   03D1 01 01               922 	.dw #0x0101
                            923 ;src/main.c:311: void quieto_entrar() {
                            924 ;	---------------------------------
                            925 ; Function quieto_entrar
                            926 ; ---------------------------------
   03D3                     927 _quieto_entrar::
                            928 ;src/main.c:312: prota.estado = ST_quieto;
   03D3 21r0Br00      [10]  929 	ld	hl,#(_prota + 0x0005)
   03D6 36 00         [10]  930 	ld	(hl),#0x00
                            931 ;src/main.c:313: prota.mover  = SI;
   03D8 21r0Ar00      [10]  932 	ld	hl,#(_prota + 0x0004)
   03DB 36 01         [10]  933 	ld	(hl),#0x01
   03DD C9            [10]  934 	ret
                            935 ;src/main.c:319: void quieto() {
                            936 ;	---------------------------------
                            937 ; Function quieto
                            938 ; ---------------------------------
   03DE                     939 _quieto::
                            940 ;src/main.c:321: u8 k = compruebaTeclas(keys, 3);
   03DE 3E 03         [ 7]  941 	ld	a,#0x03
   03E0 F5            [11]  942 	push	af
   03E1 33            [ 6]  943 	inc	sp
   03E2 21r16r04      [10]  944 	ld	hl,#_quieto_keys_1_123
   03E5 E5            [11]  945 	push	hl
   03E6 CDrF9r02      [17]  946 	call	_compruebaTeclas
   03E9 F1            [10]  947 	pop	af
   03EA 33            [ 6]  948 	inc	sp
   03EB 5D            [ 4]  949 	ld	e,l
                            950 ;src/main.c:322: switch(k) {
   03EC 3E 03         [ 7]  951 	ld	a,#0x03
   03EE 93            [ 4]  952 	sub	a, e
   03EF D8            [11]  953 	ret	C
   03F0 16 00         [ 7]  954 	ld	d,#0x00
   03F2 21rF8r03      [10]  955 	ld	hl,#00112$
   03F5 19            [11]  956 	add	hl,de
   03F6 19            [11]  957 	add	hl,de
                            958 ;src/main.c:323: case 0: break; // Nada que hacer
                            959 ;src/main.c:324: case 1: prepSalto_entrar(); break;
   03F7 E9            [ 4]  960 	jp	(hl)
   03F8                     961 00112$:
   03F8 18 1B         [12]  962 	jr	00106$
   03FA 18 06         [12]  963 	jr	00102$
   03FC 18 07         [12]  964 	jr	00103$
   03FE 18 0D         [12]  965 	jr	00104$
   0400 18 13         [12]  966 	jr	00106$
   0402                     967 00102$:
   0402 C3r9Fr04      [10]  968 	jp  _prepSalto_entrar
                            969 ;src/main.c:325: case 2: andando_entrar(M_derecha);   break;
   0405                     970 00103$:
   0405 AF            [ 4]  971 	xor	a, a
   0406 F5            [11]  972 	push	af
   0407 33            [ 6]  973 	inc	sp
   0408 CDrE1r04      [17]  974 	call	_andando_entrar
   040B 33            [ 6]  975 	inc	sp
   040C C9            [10]  976 	ret
                            977 ;src/main.c:326: case 3: andando_entrar(M_izquierda); break;
   040D                     978 00104$:
   040D 3E 01         [ 7]  979 	ld	a,#0x01
   040F F5            [11]  980 	push	af
   0410 33            [ 6]  981 	inc	sp
   0411 CDrE1r04      [17]  982 	call	_andando_entrar
   0414 33            [ 6]  983 	inc	sp
                            984 ;src/main.c:327: }
   0415                     985 00106$:
   0415 C9            [10]  986 	ret
   0416                     987 _quieto_keys_1_123:
   0416 00 01               988 	.dw #0x0100
   0418 00 02               989 	.dw #0x0200
   041A 01 01               990 	.dw #0x0101
                            991 ;src/main.c:330: void ascender() {
                            992 ;	---------------------------------
                            993 ; Function ascender
                            994 ; ---------------------------------
   041C                     995 _ascender::
                            996 ;src/main.c:331: prota.y -= cpct_get2Bits(g_tablaSalto, prota.salto);
   041C 21r07r00      [10]  997 	ld	hl, #(_prota + 0x0001) + 0
   041F 4E            [ 7]  998 	ld	c,(hl)
   0420 21r10r00      [10]  999 	ld	hl, #(_prota + 0x000a) + 0
   0423 5E            [ 7] 1000 	ld	e,(hl)
   0424 16 00         [ 7] 1001 	ld	d,#0x00
   0426 C5            [11] 1002 	push	bc
   0427 D5            [11] 1003 	push	de
   0428 21r5Cr00      [10] 1004 	ld	hl,#_g_tablaSalto
   042B E5            [11] 1005 	push	hl
   042C CDr00r00      [17] 1006 	call	_cpct_get2Bits
   042F C1            [10] 1007 	pop	bc
   0430 79            [ 4] 1008 	ld	a,c
   0431 95            [ 4] 1009 	sub	a, l
   0432 4F            [ 4] 1010 	ld	c,a
   0433 21r07r00      [10] 1011 	ld	hl,#(_prota + 0x0001)
   0436 71            [ 7] 1012 	ld	(hl),c
                           1013 ;src/main.c:332: if (prota.y < ORIGEN_MAPA_Y)
   0437 79            [ 4] 1014 	ld	a,c
   0438 D6 44         [ 7] 1015 	sub	a, #0x44
   043A 30 02         [12] 1016 	jr	NC,00102$
                           1017 ;src/main.c:333: prota.y = ORIGEN_MAPA_Y;
   043C 36 44         [10] 1018 	ld	(hl),#0x44
   043E                    1019 00102$:
                           1020 ;src/main.c:334: if (++prota.salto == PASOS_SALTO)
   043E 3Ar10r00      [13] 1021 	ld	a, (#(_prota + 0x000a) + 0)
   0441 3C            [ 4] 1022 	inc	a
   0442 32r10r00      [13] 1023 	ld	(#(_prota + 0x000a)),a
   0445 D6 14         [ 7] 1024 	sub	a, #0x14
   0447 C0            [11] 1025 	ret	NZ
                           1026 ;src/main.c:335: cayendo_entrar();
   0448 CDr57r03      [17] 1027 	call	_cayendo_entrar
   044B C9            [10] 1028 	ret
                           1029 ;src/main.c:338: void saltando_entrar() {
                           1030 ;	---------------------------------
                           1031 ; Function saltando_entrar
                           1032 ; ---------------------------------
   044C                    1033 _saltando_entrar::
                           1034 ;src/main.c:339: prota.estado = ST_saltando;
   044C 21r0Br00      [10] 1035 	ld	hl,#(_prota + 0x0005)
   044F 36 03         [10] 1036 	ld	(hl),#0x03
                           1037 ;src/main.c:340: prota.mover  = SI;
   0451 21r0Ar00      [10] 1038 	ld	hl,#(_prota + 0x0004)
   0454 36 01         [10] 1039 	ld	(hl),#0x01
                           1040 ;src/main.c:341: prota.salto  = 0;
   0456 21r10r00      [10] 1041 	ld	hl,#(_prota + 0x000a)
   0459 36 00         [10] 1042 	ld	(hl),#0x00
   045B C9            [10] 1043 	ret
                           1044 ;src/main.c:344: void saltando() {
                           1045 ;	---------------------------------
                           1046 ; Function saltando
                           1047 ; ---------------------------------
   045C                    1048 _saltando::
                           1049 ;src/main.c:345: if (!cpct_isKeyPressed(Key_CursorUp)) {
   045C 21 00 01      [10] 1050 	ld	hl,#0x0100
   045F CDr00r00      [17] 1051 	call	_cpct_isKeyPressed
   0462 7D            [ 4] 1052 	ld	a,l
   0463 B7            [ 4] 1053 	or	a, a
                           1054 ;src/main.c:346: cayendo_entrar();
   0464 CAr57r03      [10] 1055 	jp	Z,_cayendo_entrar
                           1056 ;src/main.c:349: u8 k = compruebaTeclas(keys, 2);
   0467 3E 02         [ 7] 1057 	ld	a,#0x02
   0469 F5            [11] 1058 	push	af
   046A 33            [ 6] 1059 	inc	sp
   046B 21r9Br04      [10] 1060 	ld	hl,#_saltando_keys_2_129
   046E E5            [11] 1061 	push	hl
   046F CDrF9r02      [17] 1062 	call	_compruebaTeclas
   0472 F1            [10] 1063 	pop	af
   0473 33            [ 6] 1064 	inc	sp
   0474 5D            [ 4] 1065 	ld	e,l
                           1066 ;src/main.c:350: switch(k) {
   0475 3E 02         [ 7] 1067 	ld	a,#0x02
   0477 93            [ 4] 1068 	sub	a, e
   0478 38 18         [12] 1069 	jr	C,00104$
   047A 16 00         [ 7] 1070 	ld	d,#0x00
   047C 21r82r04      [10] 1071 	ld	hl,#00118$
   047F 19            [11] 1072 	add	hl,de
   0480 19            [11] 1073 	add	hl,de
                           1074 ;src/main.c:351: case 0: break;
                           1075 ;src/main.c:352: case 1: moverDerecha();   break;
   0481 E9            [ 4] 1076 	jp	(hl)
   0482                    1077 00118$:
   0482 18 0E         [12] 1078 	jr	00104$
   0484 18 04         [12] 1079 	jr	00102$
   0486 18 07         [12] 1080 	jr	00103$
   0488 18 08         [12] 1081 	jr	00104$
   048A                    1082 00102$:
   048A CDrAAr02      [17] 1083 	call	_moverDerecha
   048D 18 03         [12] 1084 	jr	00104$
                           1085 ;src/main.c:353: case 2: moverIzquierda(); break;
   048F                    1086 00103$:
   048F CDrD1r02      [17] 1087 	call	_moverIzquierda
                           1088 ;src/main.c:354: }
   0492                    1089 00104$:
                           1090 ;src/main.c:355: ascender();
   0492 CDr1Cr04      [17] 1091 	call	_ascender
                           1092 ;src/main.c:356: prota.mover = SI;
   0495 21r0Ar00      [10] 1093 	ld	hl,#(_prota + 0x0004)
   0498 36 01         [10] 1094 	ld	(hl),#0x01
   049A C9            [10] 1095 	ret
   049B                    1096 _saltando_keys_2_129:
   049B 00 02              1097 	.dw #0x0200
   049D 01 01              1098 	.dw #0x0101
                           1099 ;src/main.c:361: void prepSalto_entrar() {
                           1100 ;	---------------------------------
                           1101 ; Function prepSalto_entrar
                           1102 ; ---------------------------------
   049F                    1103 _prepSalto_entrar::
                           1104 ;src/main.c:362: prota.nframe = 0;
   049F 21r0Er00      [10] 1105 	ld	hl,#(_prota + 0x0008)
   04A2 36 00         [10] 1106 	ld	(hl),#0x00
                           1107 ;src/main.c:363: prota.estado = ST_prepSalto;
   04A4 21r0Br00      [10] 1108 	ld	hl,#(_prota + 0x0005)
   04A7 36 02         [10] 1109 	ld	(hl),#0x02
                           1110 ;src/main.c:364: prota.mover  = SI;
   04A9 21r0Ar00      [10] 1111 	ld	hl,#(_prota + 0x0004)
   04AC 36 01         [10] 1112 	ld	(hl),#0x01
   04AE C9            [10] 1113 	ret
                           1114 ;src/main.c:367: void prepSalto_animar() {
                           1115 ;	---------------------------------
                           1116 ; Function prepSalto_animar
                           1117 ; ---------------------------------
   04AF                    1118 _prepSalto_animar::
                           1119 ;src/main.c:368: if (++prota.nframe == SALTAR_FRAMES*ANIM_PAUSA)
   04AF 01r0Er00      [10] 1120 	ld	bc,#_prota+8
   04B2 0A            [ 7] 1121 	ld	a,(bc)
   04B3 3C            [ 4] 1122 	inc	a
   04B4 02            [ 7] 1123 	ld	(bc),a
   04B5 D6 10         [ 7] 1124 	sub	a, #0x10
   04B7 C0            [11] 1125 	ret	NZ
                           1126 ;src/main.c:369: saltando_entrar();
   04B8 C3r4Cr04      [10] 1127 	jp  _saltando_entrar
                           1128 ;src/main.c:372: void prepSalto() {
                           1129 ;	---------------------------------
                           1130 ; Function prepSalto
                           1131 ; ---------------------------------
   04BB                    1132 _prepSalto::
                           1133 ;src/main.c:374: u8 k = compruebaTeclas(keys, 1);
   04BB 3E 01         [ 7] 1134 	ld	a,#0x01
   04BD F5            [11] 1135 	push	af
   04BE 33            [ 6] 1136 	inc	sp
   04BF 21rDFr04      [10] 1137 	ld	hl,#_prepSalto_keys_1_133
   04C2 E5            [11] 1138 	push	hl
   04C3 CDrF9r02      [17] 1139 	call	_compruebaTeclas
   04C6 F1            [10] 1140 	pop	af
   04C7 33            [ 6] 1141 	inc	sp
                           1142 ;src/main.c:375: switch(k) {
   04C8 7D            [ 4] 1143 	ld	a,l
   04C9 B7            [ 4] 1144 	or	a, a
   04CA 28 05         [12] 1145 	jr	Z,00101$
   04CC 2D            [ 4] 1146 	dec	l
   04CD 28 07         [12] 1147 	jr	Z,00102$
   04CF 18 08         [12] 1148 	jr	00103$
                           1149 ;src/main.c:376: case 0: quieto_entrar(); break; 
   04D1                    1150 00101$:
   04D1 CDrD3r03      [17] 1151 	call	_quieto_entrar
   04D4 18 03         [12] 1152 	jr	00103$
                           1153 ;src/main.c:377: case 1: prepSalto_animar(); break;
   04D6                    1154 00102$:
   04D6 CDrAFr04      [17] 1155 	call	_prepSalto_animar
                           1156 ;src/main.c:378: }
   04D9                    1157 00103$:
                           1158 ;src/main.c:379: prota.mover = SI;
   04D9 21r0Ar00      [10] 1159 	ld	hl,#(_prota + 0x0004)
   04DC 36 01         [10] 1160 	ld	(hl),#0x01
   04DE C9            [10] 1161 	ret
   04DF                    1162 _prepSalto_keys_1_133:
   04DF 00 01              1163 	.dw #0x0100
                           1164 ;src/main.c:382: void andando_entrar(u8 mirar) {
                           1165 ;	---------------------------------
                           1166 ; Function andando_entrar
                           1167 ; ---------------------------------
   04E1                    1168 _andando_entrar::
                           1169 ;src/main.c:383: prota.nframe = 0;
   04E1 21r0Er00      [10] 1170 	ld	hl,#(_prota + 0x0008)
   04E4 36 00         [10] 1171 	ld	(hl),#0x00
                           1172 ;src/main.c:384: prota.estado = ST_andando;
   04E6 21r0Br00      [10] 1173 	ld	hl,#(_prota + 0x0005)
   04E9 36 01         [10] 1174 	ld	(hl),#0x01
                           1175 ;src/main.c:385: prota.mira   = mirar;
   04EB 21r0Fr00      [10] 1176 	ld	hl,#(_prota + 0x0009)
   04EE FD 21 02 00   [14] 1177 	ld	iy,#2
   04F2 FD 39         [15] 1178 	add	iy,sp
   04F4 FD 7E 00      [19] 1179 	ld	a,0 (iy)
   04F7 77            [ 7] 1180 	ld	(hl),a
                           1181 ;src/main.c:386: prota.mover  = SI;
   04F8 21r0Ar00      [10] 1182 	ld	hl,#(_prota + 0x0004)
   04FB 36 01         [10] 1183 	ld	(hl),#0x01
   04FD C9            [10] 1184 	ret
                           1185 ;src/main.c:389: void andando_animar(u8 mirar) {
                           1186 ;	---------------------------------
                           1187 ; Function andando_animar
                           1188 ; ---------------------------------
   04FE                    1189 _andando_animar::
                           1190 ;src/main.c:390: prota.mira  = mirar;
   04FE 21r0Fr00      [10] 1191 	ld	hl,#(_prota + 0x0009)
   0501 FD 21 02 00   [14] 1192 	ld	iy,#2
   0505 FD 39         [15] 1193 	add	iy,sp
   0507 FD 7E 00      [19] 1194 	ld	a,0 (iy)
   050A 77            [ 7] 1195 	ld	(hl),a
                           1196 ;src/main.c:391: if(++prota.nframe == ANDAR_FRAMES*ANIM_PAUSA)
   050B 01r0Er00      [10] 1197 	ld	bc,#_prota + 8
   050E 0A            [ 7] 1198 	ld	a,(bc)
   050F 3C            [ 4] 1199 	inc	a
   0510 02            [ 7] 1200 	ld	(bc),a
   0511 D6 14         [ 7] 1201 	sub	a, #0x14
   0513 C0            [11] 1202 	ret	NZ
                           1203 ;src/main.c:392: prota.nframe = 0;
   0514 AF            [ 4] 1204 	xor	a, a
   0515 02            [ 7] 1205 	ld	(bc),a
   0516 C9            [10] 1206 	ret
                           1207 ;src/main.c:395: void andando() {
                           1208 ;	---------------------------------
                           1209 ; Function andando
                           1210 ; ---------------------------------
   0517                    1211 _andando::
                           1212 ;src/main.c:397: u8 k = compruebaTeclas(keys, 3);
   0517 3E 03         [ 7] 1213 	ld	a,#0x03
   0519 F5            [11] 1214 	push	af
   051A 33            [ 6] 1215 	inc	sp
   051B 21r69r05      [10] 1216 	ld	hl,#_andando_keys_1_139
   051E E5            [11] 1217 	push	hl
   051F CDrF9r02      [17] 1218 	call	_compruebaTeclas
   0522 F1            [10] 1219 	pop	af
   0523 33            [ 6] 1220 	inc	sp
   0524 5D            [ 4] 1221 	ld	e,l
                           1222 ;src/main.c:398: switch(k) {
   0525 3E 03         [ 7] 1223 	ld	a,#0x03
   0527 93            [ 4] 1224 	sub	a, e
   0528 38 31         [12] 1225 	jr	C,00105$
   052A 16 00         [ 7] 1226 	ld	d,#0x00
   052C 21r32r05      [10] 1227 	ld	hl,#00118$
   052F 19            [11] 1228 	add	hl,de
   0530 19            [11] 1229 	add	hl,de
                           1230 ;src/main.c:399: case 0: quieto_entrar();    break;
   0531 E9            [ 4] 1231 	jp	(hl)
   0532                    1232 00118$:
   0532 18 06         [12] 1233 	jr	00101$
   0534 18 09         [12] 1234 	jr	00102$
   0536 18 0C         [12] 1235 	jr	00103$
   0538 18 16         [12] 1236 	jr	00104$
   053A                    1237 00101$:
   053A CDrD3r03      [17] 1238 	call	_quieto_entrar
   053D 18 1C         [12] 1239 	jr	00105$
                           1240 ;src/main.c:400: case 1: prepSalto_entrar(); break;
   053F                    1241 00102$:
   053F CDr9Fr04      [17] 1242 	call	_prepSalto_entrar
   0542 18 17         [12] 1243 	jr	00105$
                           1244 ;src/main.c:401: case 2: moverDerecha();   andando_animar(M_derecha);   break;
   0544                    1245 00103$:
   0544 CDrAAr02      [17] 1246 	call	_moverDerecha
   0547 AF            [ 4] 1247 	xor	a, a
   0548 F5            [11] 1248 	push	af
   0549 33            [ 6] 1249 	inc	sp
   054A CDrFEr04      [17] 1250 	call	_andando_animar
   054D 33            [ 6] 1251 	inc	sp
   054E 18 0B         [12] 1252 	jr	00105$
                           1253 ;src/main.c:402: case 3: moverIzquierda(); andando_animar(M_izquierda); break;
   0550                    1254 00104$:
   0550 CDrD1r02      [17] 1255 	call	_moverIzquierda
   0553 3E 01         [ 7] 1256 	ld	a,#0x01
   0555 F5            [11] 1257 	push	af
   0556 33            [ 6] 1258 	inc	sp
   0557 CDrFEr04      [17] 1259 	call	_andando_animar
   055A 33            [ 6] 1260 	inc	sp
                           1261 ;src/main.c:403: }
   055B                    1262 00105$:
                           1263 ;src/main.c:404: prota.mover = SI;
   055B 21r0Ar00      [10] 1264 	ld	hl,#(_prota + 0x0004)
   055E 36 01         [10] 1265 	ld	(hl),#0x01
                           1266 ;src/main.c:405: if (!sobreSuelo())
   0560 CDr18r02      [17] 1267 	call	_sobreSuelo
   0563 7D            [ 4] 1268 	ld	a,l
   0564 B7            [ 4] 1269 	or	a, a
   0565 C0            [11] 1270 	ret	NZ
                           1271 ;src/main.c:406: cayendo_entrar();
   0566 C3r57r03      [10] 1272 	jp  _cayendo_entrar
   0569                    1273 _andando_keys_1_139:
   0569 00 01              1274 	.dw #0x0100
   056B 00 02              1275 	.dw #0x0200
   056D 01 01              1276 	.dw #0x0101
                           1277 ;src/main.c:409: void ejecutarEstado() {
                           1278 ;	---------------------------------
                           1279 ; Function ejecutarEstado
                           1280 ; ---------------------------------
   056F                    1281 _ejecutarEstado::
                           1282 ;src/main.c:410: switch(prota.estado) {
   056F 21r0Br00      [10] 1283 	ld	hl, #(_prota + 0x0005) + 0
   0572 5E            [ 7] 1284 	ld	e,(hl)
   0573 3E 05         [ 7] 1285 	ld	a,#0x05
   0575 93            [ 4] 1286 	sub	a, e
   0576 D8            [11] 1287 	ret	C
   0577 16 00         [ 7] 1288 	ld	d,#0x00
   0579 21r7Fr05      [10] 1289 	ld	hl,#00114$
   057C 19            [11] 1290 	add	hl,de
   057D 19            [11] 1291 	add	hl,de
                           1292 ;src/main.c:411: case ST_quieto:      quieto();      break;
   057E E9            [ 4] 1293 	jp	(hl)
   057F                    1294 00114$:
   057F 18 0A         [12] 1295 	jr	00101$
   0581 18 0B         [12] 1296 	jr	00102$
   0583 18 0C         [12] 1297 	jr	00103$
   0585 18 0D         [12] 1298 	jr	00104$
   0587 18 0E         [12] 1299 	jr	00105$
   0589 18 0F         [12] 1300 	jr	00106$
   058B                    1301 00101$:
   058B C3rDEr03      [10] 1302 	jp  _quieto
                           1303 ;src/main.c:412: case ST_andando:     andando();     break;
   058E                    1304 00102$:
   058E C3r17r05      [10] 1305 	jp  _andando
                           1306 ;src/main.c:413: case ST_prepSalto:   prepSalto();   break;
   0591                    1307 00103$:
   0591 C3rBBr04      [10] 1308 	jp  _prepSalto
                           1309 ;src/main.c:414: case ST_saltando:    saltando();    break;
   0594                    1310 00104$:
   0594 C3r5Cr04      [10] 1311 	jp  _saltando
                           1312 ;src/main.c:415: case ST_cayendo:     cayendo();     break;
   0597                    1313 00105$:
   0597 C3r8Er03      [10] 1314 	jp  _cayendo
                           1315 ;src/main.c:416: case ST_aterrizando: aterrizando(); break;
   059A                    1316 00106$:
                           1317 ;src/main.c:417: }
   059A C3r46r03      [10] 1318 	jp  _aterrizando
                           1319 ;src/main.c:420: void inicializar() {
                           1320 ;	---------------------------------
                           1321 ; Function inicializar
                           1322 ; ---------------------------------
   059D                    1323 _inicializar::
                           1324 ;src/main.c:421: cpct_disableFirmware();
   059D CDr00r00      [17] 1325 	call	_cpct_disableFirmware
                           1326 ;src/main.c:422: cpct_setVideoMode(0);
   05A0 2E 00         [ 7] 1327 	ld	l,#0x00
   05A2 CDr00r00      [17] 1328 	call	_cpct_setVideoMode
                           1329 ;src/main.c:423: cpct_setPalette(g_palette, 16);
   05A5 21 10 00      [10] 1330 	ld	hl,#0x0010
   05A8 E5            [11] 1331 	push	hl
   05A9 21r00r00      [10] 1332 	ld	hl,#_g_palette
   05AC E5            [11] 1333 	push	hl
   05AD CDr00r00      [17] 1334 	call	_cpct_setPalette
                           1335 ;src/main.c:424: cpct_setBorder(HW_BLACK);
   05B0 21 10 14      [10] 1336 	ld	hl,#0x1410
   05B3 E5            [11] 1337 	push	hl
   05B4 CDr00r00      [17] 1338 	call	_cpct_setPALColour
                           1339 ;src/main.c:425: cpct_etm_setTileset2x4(g_tileset);
   05B7 21r00r00      [10] 1340 	ld	hl,#_g_tileset
   05BA CDr00r00      [17] 1341 	call	_cpct_etm_setTileset2x4
                           1342 ;src/main.c:426: cpct_drawSprite(g_retropolis_0, cpctm_screenPtr(CPCT_VMEM_START,  0, 0), G_RETROPOLIS_0_W, G_RETROPOLIS_0_H);
   05BD 21 28 42      [10] 1343 	ld	hl,#0x4228
   05C0 E5            [11] 1344 	push	hl
   05C1 21 00 C0      [10] 1345 	ld	hl,#0xC000
   05C4 E5            [11] 1346 	push	hl
   05C5 21r00r00      [10] 1347 	ld	hl,#_g_retropolis_0
   05C8 E5            [11] 1348 	push	hl
   05C9 CDr00r00      [17] 1349 	call	_cpct_drawSprite
                           1350 ;src/main.c:427: cpct_drawSprite(g_retropolis_1, cpctm_screenPtr(CPCT_VMEM_START, 40, 0), G_RETROPOLIS_0_W, G_RETROPOLIS_0_H);
   05CC 21 28 42      [10] 1351 	ld	hl,#0x4228
   05CF E5            [11] 1352 	push	hl
   05D0 26 C0         [ 7] 1353 	ld	h, #0xC0
   05D2 E5            [11] 1354 	push	hl
   05D3 21r00r00      [10] 1355 	ld	hl,#_g_retropolis_1
   05D6 E5            [11] 1356 	push	hl
   05D7 CDr00r00      [17] 1357 	call	_cpct_drawSprite
                           1358 ;src/main.c:428: mapa = g_map1;
   05DA 21r00r00      [10] 1359 	ld	hl,#_g_map1+0
   05DD 22r03r00      [16] 1360 	ld	(_mapa),hl
                           1361 ;src/main.c:429: num_mapa = 0;
   05E0 21r05r00      [10] 1362 	ld	hl,#_num_mapa + 0
   05E3 36 00         [10] 1363 	ld	(hl), #0x00
                           1364 ;src/main.c:430: prota.x = prota.px = 0;
   05E5 21r08r00      [10] 1365 	ld	hl,#(_prota + 0x0002)
   05E8 36 00         [10] 1366 	ld	(hl),#0x00
   05EA 21r06r00      [10] 1367 	ld	hl,#_prota
   05ED 36 00         [10] 1368 	ld	(hl),#0x00
                           1369 ;src/main.c:431: prota.y = prota.py = 100;
   05EF 21r09r00      [10] 1370 	ld	hl,#(_prota + 0x0003)
   05F2 36 64         [10] 1371 	ld	(hl),#0x64
   05F4 21r07r00      [10] 1372 	ld	hl,#(_prota + 0x0001)
   05F7 36 64         [10] 1373 	ld	(hl),#0x64
                           1374 ;src/main.c:432: prota.estado = ST_quieto;
   05F9 21r0Br00      [10] 1375 	ld	hl,#(_prota + 0x0005)
   05FC 36 00         [10] 1376 	ld	(hl),#0x00
                           1377 ;src/main.c:433: prota.mira   = M_derecha;
   05FE 21r0Fr00      [10] 1378 	ld	hl,#(_prota + 0x0009)
   0601 36 00         [10] 1379 	ld	(hl),#0x00
                           1380 ;src/main.c:434: prota.nframe = 0;
   0603 21r0Er00      [10] 1381 	ld	hl,#(_prota + 0x0008)
   0606 36 00         [10] 1382 	ld	(hl),#0x00
                           1383 ;src/main.c:435: prota.mover  = NO;
   0608 21r0Ar00      [10] 1384 	ld	hl,#(_prota + 0x0004)
   060B 36 00         [10] 1385 	ld	(hl),#0x00
                           1386 ;src/main.c:436: prota.frame  = &g_frames[0];
   060D 21r16r00      [10] 1387 	ld	hl,#_g_frames
   0610 22r0Cr00      [16] 1388 	ld	((_prota + 0x0006)), hl
                           1389 ;src/main.c:437: dibujarMapa();
   0613 CDr78r00      [17] 1390 	call	_dibujarMapa
                           1391 ;src/main.c:438: dibujarProta();
   0616 CDr30r01      [17] 1392 	call	_dibujarProta
                           1393 ;src/main.c:439: cpct_akp_musicInit(G_song);
   0619 21 00 02      [10] 1394 	ld	hl,#_G_song
   061C E5            [11] 1395 	push	hl
   061D CDr00r00      [17] 1396 	call	_cpct_akp_musicInit
   0620 F1            [10] 1397 	pop	af
                           1398 ;src/main.c:440: cpct_setInterruptHandler(interrupcion);
   0621 21r62r00      [10] 1399 	ld	hl,#_interrupcion
   0624 CDr00r00      [17] 1400 	call	_cpct_setInterruptHandler
   0627 C9            [10] 1401 	ret
                           1402 ;src/main.c:443: void main(void) {
                           1403 ;	---------------------------------
                           1404 ; Function main
                           1405 ; ---------------------------------
   0628                    1406 _main::
                           1407 ;src/main.c:444: inicializar();
   0628 CDr9Dr05      [17] 1408 	call	_inicializar
                           1409 ;src/main.c:447: while (1) {
   062B                    1410 00104$:
                           1411 ;src/main.c:448: ejecutarEstado();
   062B CDr6Fr05      [17] 1412 	call	_ejecutarEstado
                           1413 ;src/main.c:449: if (prota.mover) {
   062E 3Ar0Ar00      [13] 1414 	ld	a, (#(_prota + 0x0004) + 0)
   0631 B7            [ 4] 1415 	or	a, a
   0632 28 F7         [12] 1416 	jr	Z,00104$
                           1417 ;src/main.c:450: seleccionarSpriteProta();
   0634 CDrD6r00      [17] 1418 	call	_seleccionarSpriteProta
                           1419 ;src/main.c:451: cpct_waitVSYNC();
   0637 CDr00r00      [17] 1420 	call	_cpct_waitVSYNC
                           1421 ;src/main.c:452: redibujarProta();
   063A CDrE5r02      [17] 1422 	call	_redibujarProta
                           1423 ;src/main.c:453: prota.mover = NO;
   063D 21r0Ar00      [10] 1424 	ld	hl,#(_prota + 0x0004)
   0640 36 00         [10] 1425 	ld	(hl),#0x00
   0642 18 E7         [12] 1426 	jr	00104$
                           1427 	.area _CODE
                           1428 	.area _INITIALIZER
                           1429 	.area _CABS (ABS)
